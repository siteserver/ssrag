# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  netCoreSdkVersion: '9.0.302'
  buildConfiguration: 'Release'
  imageName: 'ssrag/core'
  productVersion: '0.9.11'

jobs:

- job: Linux
  pool:
    vmImage: 'Ubuntu 20.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: $(netCoreSdkVersion)
  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
  - script: npm install
  - script: npm run build
  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: './build/build.sln'
      feedsToUse: 'select'
  - script: dotnet build ./build/build.sln -c $(buildConfiguration)
  - script: dotnet publish ./build/src/SSRAG.Cli/SSRAG.Cli.csproj -c $(buildConfiguration) -o ./publish/ssrag-$(productVersion)
  - script: dotnet publish ./build/src/SSRAG.Web/SSRAG.Web.csproj -c $(buildConfiguration) -o ./publish/ssrag-$(productVersion)
  - script: npm run copy
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './publish/ssrag-$(productVersion)' 
      archiveType: 'tar'
      tarCompression: 'gz'
      includeRootFolder: false
      archiveFile: './publish/dist/ssrag-$(productVersion).tar.gz'
  - script: npm run publish-tgz
    env:
      OSS_ACCESS_KEY_ID: $(ossAccessKeyId)
      OSS_SECRET_ACCESS_KEY: $(ossSecretAccessKey)
      OSS_BUCKET_DL: $(ossBucketDl)
      OSS_BUCKET_WWW: $(ossBucketWww)
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: './publish/ssrag-$(productVersion)' 
      archiveType: 'zip'
      includeRootFolder: false
      archiveFile: './publish/dist/ssrag-$(productVersion).zip'
  - script: npm run publish-zip
    env:
      OSS_ACCESS_KEY_ID: $(ossAccessKeyId)
      OSS_SECRET_ACCESS_KEY: $(ossSecretAccessKey)
      OSS_BUCKET_DL: $(ossBucketDl)
      OSS_BUCKET_WWW: $(ossBucketWww)
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: './publish/dist'
      artifactName: 'ssrag-$(productVersion)-linux'
  - script: docker build -f docker/Dockerfile --no-cache -t $(imageName):latest -t $(imageName):$(productVersion) .
  - task: Docker@2
    displayName: Push image
    inputs:
      containerRegistry: |
        docker
      repository: $(imageName)
      command: push
      tags: |
        latest
        $(productVersion)