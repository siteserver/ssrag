name: docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERSION: "0.9.11"

jobs:
  build:

    runs-on: ubuntu-latest

    env: # 设置作业级别的环境变量
      OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
      OSS_SECRET_ACCESS_KEY: ${{ secrets.OSS_SECRET_ACCESS_KEY }}
      OSS_BUCKET_DL: ${{ secrets.OSS_BUCKET_DL }}

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install npm and build
      run: |
        npm install
        npm run build

    - name: Build Web
      working-directory: ./web
      run: |
        npm install
        npm run build

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      working-directory: ./build
      run: dotnet restore

    - name: Build
      run: |
        dotnet build ./build/build.sln -c Release --no-restore
        dotnet publish ./build/src/SSRAG.Cli/SSRAG.Cli.csproj -c Release -o ./publish/ssrag-$VERSION
        dotnet publish ./build/src/SSRAG.Web/SSRAG.Web.csproj -c Release -o ./publish/ssrag-$VERSION

    - name: Copy
      run: npm run copy

    - name: Archive
      run: |
        mkdir -p ./publish/dist
        cd ./publish/ssrag-$VERSION
        tar -czqf ../dist/ssrag-$VERSION.tar.gz .
        zip -qr ../dist/ssrag-$VERSION.zip .

    - name: Publish Tgz
      run: npm run publish-tgz

    - name: Publish Zip
      run: npm run publish-zip
